from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import os

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("‚úç –í–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton("üìã –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"))

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
refine_menu = ReplyKeyboardMarkup(resize_keyboard=True)
refine_menu.add(KeyboardButton("‚úç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º"), KeyboardButton("üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"))

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø CharBot ‚Äì AI-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.\n\n–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?", reply_markup=main_menu)

@dp.message_handler(lambda message: message.text == "‚úç –í–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ")
async def create_character_text(message: types.Message):
    await message.reply("‚úç –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å!")

@dp.message_handler(lambda message: message.text == "üìã –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")
async def start_character_quiz(message: types.Message):
    await message.reply("üìã –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n\n–ö–∞–∫–æ–π —É –Ω–µ–≥–æ –ø–æ–ª?", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True)
                         .add("üöπ –ú—É–∂—Å–∫–æ–π", "üö∫ –ñ–µ–Ω—Å–∫–∏–π", "‚ùì –î—Ä—É–≥–æ–π"))

@dp.message_handler(lambda message: message.text in ["üöπ –ú—É–∂—Å–∫–æ–π", "üö∫ –ñ–µ–Ω—Å–∫–∏–π", "‚ùì –î—Ä—É–≥–æ–π"])
async def ask_age(message: types.Message):
    await message.reply("üßë –ö–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True)
                         .add("üë∂ –†–µ–±—ë–Ω–æ–∫", "üßë –í–∑—Ä–æ—Å–ª—ã–π", "üë¥ –ü–æ–∂–∏–ª–æ–π"))

# (–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã...)

@dp.message_handler(lambda message: message.text == "–ì–æ—Ç–æ–≤–æ")  # –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏—Ç –∞–Ω–∫–µ—Ç—É
async def finish_character_quiz(message: types.Message):
    await message.reply("‚ú® –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω!\n\n–•–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏?", reply_markup=refine_menu)

@dp.message_handler(lambda message: message.text == "‚úç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º")
async def refine_character_text(message: types.Message):
    await message.reply("‚úç –ù–∞–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ!")

@dp.message_handler(lambda message: message.text == "üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def refine_character_quiz(message: types.Message):
    await start_character_quiz(message)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
