import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"))
main_menu.add(KeyboardButton("üìÇ –ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏"), KeyboardButton("üîë –ü–æ–¥–ø–∏—Å–∫–∞"))
main_menu.add(KeyboardButton("üåç –Ø–∑—ã–∫"))

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø CharBot ‚Äì AI-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=main_menu
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
@dp.message_handler(lambda message: message.text == "üìù –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
async def create_character_choice(message: types.Message):
    await message.reply(
        "–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?\n\nüìù –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º –æ–ø–∏—Å–∞–Ω–∏–µ\nüìã –ó–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(
            KeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º"),
            KeyboardButton("üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"),
            KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@dp.message_handler(lambda message: message.text == "üìù –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º")
async def create_character_text(message: types.Message):
    await message.reply("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n'–í—ã—Å–æ–∫–∏–π –≤–æ–∏–Ω —Å –æ–≥–Ω–µ–Ω–Ω–æ-—Ä—ã–∂–∏–º–∏ –≤–æ–ª–æ—Å–∞–º–∏ –∏ —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∞–º–∏, –æ–¥–µ—Ç—ã–π –≤ –¥–æ—Å–ø–µ—Ö–∏ –±—É–¥—É—â–µ–≥–æ'.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
@dp.message_handler()
async def process_character_description(message: types.Message):
    user_input = message.text.strip()
    if len(user_input) < 10:
        await message.reply("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ù–∞–ø–∏—à–∏ —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ!")
    else:
        await message.reply(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:\n\nüîπ {user_input}\n\nüöÄ –î–∞–ª—å—à–µ —Ç—ã —Å–º–æ–∂–µ—à—å –µ–≥–æ —É—Ç–æ—á–Ω–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∫–µ—Ç—ã (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
@dp.message_handler(lambda message: message.text == "üìã –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def create_character_form(message: types.Message):
    await message.reply("üìã –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏"
@dp.message_handler(lambda message: message.text == "üìÇ –ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏")
async def my_characters(message: types.Message):
    await message.reply("üìÇ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∫–∞"
@dp.message_handler(lambda message: message.text == "üîë –ü–æ–¥–ø–∏—Å–∫–∞")
async def subscription_info(message: types.Message):
    await message.reply("üîë –ü–æ–¥–ø–∏—Å–∫–∞: 5$ –≤ –º–µ—Å—è—Ü.\n‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏ –≤–∞—Ä–∏–∞—Ü–∏–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ø–∑—ã–∫"
@dp.message_handler(lambda message: message.text == "üåç –Ø–∑—ã–∫")
async def change_language(message: types.Message):
    await message.reply("üåç –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
