import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("‚öí –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"), KeyboardButton("üìÅ –ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏"))
main_menu.add(KeyboardButton("üîë –ü–æ–¥–ø–∏—Å–∫–∞"), KeyboardButton("üåç –Ø–∑—ã–∫"))

# –ü–æ–¥–º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
create_menu = ReplyKeyboardMarkup(resize_keyboard=True)
create_menu.add(KeyboardButton("‚úç –£—Ç–æ—á–Ω—è—Ç—å –¥–µ—Ç–∞–ª–∏ –≤ —á–∞—Ç–µ"), KeyboardButton("üìú –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"))
create_menu.add(KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø CharBot ‚Äì AI-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:", reply_markup=main_menu)

@dp.message_handler(lambda message: message.text == "‚öí –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
async def create_character_menu(message: types.Message):
    await message.reply("‚ú® –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=create_menu)

@dp.message_handler(lambda message: message.text == "üìÅ –ú–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏")
async def my_characters(message: types.Message):
    await message.reply("üìÇ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.", reply_markup=main_menu)

@dp.message_handler(lambda message: message.text == "üîë –ü–æ–¥–ø–∏—Å–∫–∞")
async def subscription_info(message: types.Message):
    await message.reply("üîë –ü–æ–¥–ø–∏—Å–∫–∞: 5$ –≤ –º–µ—Å—è—Ü.\n‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏ –≤–∞—Ä–∏–∞—Ü–∏–∏.", reply_markup=main_menu)

@dp.message_handler(lambda message: message.text == "üåç –Ø–∑—ã–∫")
async def change_language(message: types.Message):
    await message.reply("üåç –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!", reply_markup=main_menu)

@dp.message_handler(lambda message: message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: types.Message):
    await message.reply("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

@dp.message_handler()
async def process_text_request(message: types.Message):
    text_request = message.text
    response_text = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:\n\nüîπ \"{text_request}\""
    await message.reply(response_text, reply_markup=create_menu)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
